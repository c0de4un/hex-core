# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# CMake
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

include( "core/cmake/constants.cmake" )
cmake_minimum_required( VERSION ${HEX_CMAKE_VERSION} )

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# CONFIGS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

include( "core/cmake/platform.cmake" )
include( "core/cmake/build_types.cmake" )

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# PROJECT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

project( "hexEngine" VERSION ${HEX_CORE_VERSION} LANGUAGES C CXX )

# Enable Position Independent Code
set( CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON )
set( CMAKE_POSITION_INDEPENDENT_CODE ON )

# C++ Version
set ( CMAKE_CXX_STANDARD ${HEX_CXX_VERSION} )
set( CMAKE_CXX_STANDARD_REQUIRED ON )
set( CMAKE_AUTOUIC ON )
set( CMAKE_AUTOMOC ON )
set( CMAKE_AUTORCC ON )

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# GLOBALS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

include( "core/cmake/globals.cmake" )

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# CONSTANTS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set( HEX_CORE_SRC "${CMAKE_CURRENT_SOURCE_DIR}/core" )

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# HEADERS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set( HEX_CORE_PUBLIC "${HEX_CORE_SRC}/public/hex/core/" )
set( HEX_CORE_HEADERS
    # CFG
    "${HEX_CORE_PUBLIC}cfg/hex_api.hpp"
    "${HEX_CORE_PUBLIC}cfg/hex_atomic.hpp"
    "${HEX_CORE_PUBLIC}cfg/hex_map.hpp"
    "${HEX_CORE_PUBLIC}cfg/hex_map.hpp"
    "${HEX_CORE_PUBLIC}cfg/hex_mutex.hpp"
    "${HEX_CORE_PUBLIC}cfg/hex_numeric.hpp"
    "${HEX_CORE_PUBLIC}cfg/hex_platform.hpp"
    "${HEX_CORE_PUBLIC}cfg/hex_vector.hpp"
    # ASYNC
    "${HEX_CORE_PUBLIC}async/SpinLock.hpp"

    # COLLECTIONS
    "${HEX_CORE_PUBLIC}collections/IDStorage.hpp"
    # MEMORY
    "${HEX_CORE_PUBLIC}memory/ReferenceBlock.hpp"
    "${HEX_CORE_PUBLIC}memory/IReferenceUser.hxx"
    "${HEX_CORE_PUBLIC}memory/MemoryManager.hpp"
    "${HEX_CORE_PUBLIC}memory/SharedPointer.hpp"
    # ECS
    "${HEX_CORE_PUBLIC}ecs/Component.hpp"
    "${HEX_CORE_PUBLIC}ecs/ComponentsManager.hpp"
    "${HEX_CORE_PUBLIC}ecs/ecs_types.hpp"
    "${HEX_CORE_PUBLIC}ecs/EntitiesManager.hpp"
    "${HEX_CORE_PUBLIC}ecs/Entity.hpp"
    "${HEX_CORE_PUBLIC}ecs/Event.hpp"
    "${HEX_CORE_PUBLIC}ecs/EventsManager.hpp"
    "${HEX_CORE_PUBLIC}ecs/IEntity.hxx"
    "${HEX_CORE_PUBLIC}ecs/IEvent.hxx"
    "${HEX_CORE_PUBLIC}ecs/ISystem.hxx"
    "${HEX_CORE_PUBLIC}ecs/System.hpp"
    "${HEX_CORE_PUBLIC}ecs/SystemsManager.hpp"
    # PCH
    "${HEX_CORE_PUBLIC}hex_core.hpp"
)

# DEBUG
if ( HEX_DEBUG OR HEX_LOGGING )
    set( HEX_CORE_HEADERS
        # CFG
        "${HEX_CORE_PUBLIC}cfg/hex_debug.hpp"
        # METRICS
        "${HEX_CORE_PUBLIC}metrics/ILogger.hxx"
        "${HEX_CORE_PUBLIC}metrics/Log.hpp"
        ${HEX_CORE_HEADERS}
    )
endif ( HEX_DEBUG OR HEX_LOGGING )

# Append to Exportable Headers
set( HEX_EXPORT_HEADERS ${HEX_CORE_HEADERS} ${HEX_EXPORT_HEADERS} )

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# SOURCES
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set( HEX_CORE_PRIVATE "${HEX_CORE_SRC}/private/hex/core/" )
set( HEX_CORE_SOURCES
    # PCH
    "${HEX_CORE_PRIVATE}hex_core.cpp"
    # ASYNC
    "${HEX_CORE_PRIVATE}async/SpinLock.cpp"
    # MEMORY
    "${HEX_CORE_PRIVATE}memory/MemoryManager.cpp"
    # ECS
    "${HEX_CORE_PRIVATE}ecs/ComponentsManager.cpp"
    "${HEX_CORE_PRIVATE}ecs/EntitiesManager.cpp"
    "${HEX_CORE_PRIVATE}ecs/Entity.cpp"
    "${HEX_CORE_PRIVATE}ecs/EventsManager.cpp"
    "${HEX_CORE_PRIVATE}ecs/System.cpp"
    "${HEX_CORE_PRIVATE}ecs/SystemsManager.cpp"
)

# DEBUG
if ( HEX_DEBUG OR HEX_LOGGING )
    set( HEX_CORE_SOURCES
        # METRICS
        "${HEX_CORE_PRIVATE}metrics/Log.cpp"
        # ASYNC
        "${HEX_CORE_PRIVATE}async/SpinLock.cpp"
        ${HEX_CORE_SOURCES}
    )
endif ( HEX_DEBUG OR HEX_LOGGING )

# Append to Exportable Sources
set( HEX_EXPORT_SOURCES ${HEX_CORE_SOURCES} ${HEX_EXPORT_SOURCES} )

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# MODULES
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

foreach( HEX_MODULE_NAME ${HEX_MODULES_LIST} )
    message( STATUS "${PROJECT_NAME} - including module #${HEX_MODULE_NAME}" )

    include( "${HEX_SRC_ROOT_DIR}/${HEX_MODULE_NAME}/module.cmake" )
endforeach()

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# BUILD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if ( HEX_CORE_BUILD_MODE STREQUAL "STATIC" )
    # Create STATIC Library Object
    add_library( hex STATIC ${HEX_EXPORT_SOURCES} ${HEX_EXPORT_HEADERS} )

    # Flags for Clang
    target_compile_options( hex PUBLIC -fexceptions )

    # Link with hexEngine.Core
    target_include_directories( hex PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/core/public" )

    # Link with hexEngine.Patfrom
    target_include_directories( hex PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/${PLATFORM}/public" )

    message( STATUS "${PROJECT_NAME} - building as STATIC library" )
elseif ( HEX_CORE_BUILD_MODE STREQUAL "SHARED" )
    # Create SHARED Library Object
    add_library( hex SHARED ${HEX_EXPORT_SOURCES} ${HEX_EXPORT_HEADERS} )

    # Flags for Clang
    target_compile_options( hex PUBLIC -fexceptions )

    # Link with hexEngine.Core
    target_include_directories( hex PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/core/public" )

    # Link with hexEngine.Patfrom
    target_include_directories( hex PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/${PLATFORM}/public" )

    message( STATUS "${PROJECT_NAME} - building as SHARED library" )
elseif ( HEX_CORE_BUILD_MODE STREQUAL "EXPORT" )
    message( FATAL_ERROR "${PROJECT_NAME} - this CMakelists should't be used if case of exporting. Instead manually include required <module.cmake> files" )
else ( HEX_CORE_BUILD_MODE STREQUAL "STATIC" )
    message( FATAL_ERROR "${PROJECT_NAME} - undefined build-mode, configuration required" )
endif ( HEX_CORE_BUILD_MODE STREQUAL "STATIC" )

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
